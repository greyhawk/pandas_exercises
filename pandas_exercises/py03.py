# AUTOGENERATED! DO NOT EDIT! File to edit: 01_python03.ipynb (unless otherwise specified).

__all__ = ['square_root_by_exhaustive', 'square_root_by_binary_search', 'square_root_by_newton', 'search',
           'select_sort']

# Cell
from typing import List

# Cell
def square_root_by_exhaustive(x: int) -> int:
    epsilon = 0.01
    step = epsilon ** 2
    num_guesses = 0
    ans = 0.0
    while abs(ans ** 2 - x) >= epsilon and ans * ans <= x:
        ans += step
        num_guesses += 1
    if abs(ans ** 2 - x) >= epsilon:
        print('Failed on square root of', x)
    else:
        print(ans, 'is close to square root of', x)
    return num_guesses


# Cell
def square_root_by_binary_search(x: int) -> int:
    epsilon = 0.01
    num_guesses = 0
    low = 0.0
    high = max(1.0, x)
    ans = (high + low) / 2.0
    while abs(ans**2 - x) >= epsilon:
        print('low =', low, 'high=', high, 'ans=', ans)
        num_guesses += 1
        if ans ** 2 < x:
            low = ans
        else:
            high = ans
        ans = (high + low) / 2.0
    print(ans, 'is close to square root of', x)
    return num_guesses

# Cell
def square_root_by_newton(x: int) -> int:
    epsilon = 0.01
    guess = x / 2.0
    num_guesses = 0
    while abs(guess * guess - x) >= epsilon:
        guess = guess - (((guess ** 2) - x) / (2 * guess))
        num_guesses += 1
    print('Square root of', x, 'is about', guess)
    return num_guesses

# Cell
def search(L: List[int or float or long], e: int or float or long) -> bool:
    """
    假设 L 是列表，其中元素已经按升序排序
    如果 e 是 L 中的元素，返回 true，否则返回 false
    """
    def bit_search(L, e, low, high):
        if low == high:
            return L[low] == e
        mid = (low + high) // 2
        if L[mid] == e:
            return True
        elif L[mid] > e:
            if low == mid:
                return False
            else:
                return bit_search(L, e, low, mid - 1)
        else:
            return bit_search(L, e, mid + 1, high)

    if len(L) == 0:
        return False
    else:
        return bit_search(L, e, 0, len(L) - 1)

# Cell
def select_sort(L: List[int or float or long]):
    """
    假设 L 是列表，其中的元素可以用 > 进行比较
    对 L 进行升序排序
    """
    suffix_start = 0
    while suffix_start != len(L):
        for i in range(suffix_start, len(L)):
            if L[i] < L[suffix_start]:
                L[suffix_start], L[i] = L[i], L[suffix_start]
        suffix_start += 1